#!/bin/ash

#These use $@ instead of $1 in case users forget to quote the argument
#and use [[ ... ]] instead of { return [[ ... ]] } for simplicity
file_is_block()             [[ -b "$@" ]]
file_is_char()              [[ -c "$@" ]]
file_is_directory()         [[ -d "$@" ]]
file_is_empty()             [[ !  -s "$@" ]]
file_is_executable()        [[ -x "$@" ]]
file_is_mine()              [[ -O "$@" ]]
file_is_modified()          [[ -N "$@" ]]
file_is_my_group()          [[ -G "$@" ]]
file_is_newer_than()        [[ "$1" -nt "$2" ]]
file_is_not_block()         [[ !  -b "$@" ]]
file_is_not_char()          [[ !  -c "$@" ]]
file_is_not_directory()     [[ !  -d "$@" ]]
file_is_not_empty()         [[ -s "$@" ]]
file_is_not_executable()    [[ !  -x "$@" ]]
file_is_not_mine()          [[ !  -O "$@" ]]
file_is_not_modified()      [[ !  -N "$@" ]]
file_is_not_my_group()      [[ !  -G "$@" ]]
file_is_not_newer_than()    [[ !  "$1" -nt "$2" ]]
file_is_not_older_than()    [[ !  "$1" -ot "$2" ]]
file_is_not_pipe()          [[ !  -p "$@" ]]
file_is_not_readable()      [[ !  -r "$@" ]]
file_is_not_regular()       [[ !  -f "$@" ]]
file_is_not_sgid()          [[ !  -g "$@" ]]
file_is_not_socket()        [[ !  -S "$@" ]]
file_is_not_sticky()        [[ !  -k "$@" ]]
file_is_not_suid()          [[ !  -u "$@" ]]
file_is_not_symlink()       [[ !  -L "$@" ]]
file_is_not_there()         [[ !  -e "$@" ]]
file_is_not_to_tty()        [[ !  -t "$@" ]]
file_is_not_writable()      [[ !  -w "$@" ]]
file_is_older_than()        [[ "$1" -ot "$2" ]]
file_is_pipe()              [[ -p "$@" ]]
file_is_readable()          [[ -r "$@" ]]
file_is_regular()           [[ -f "$@" ]]
file_is_sgid()              [[ -g "$@" ]]
file_is_socket()            [[ -S "$@" ]]
file_is_sticky()            [[ -k "$@" ]]
file_is_suid()              [[ -u "$@" ]]
file_is_symlink()           [[ -L "$@" ]]
file_is_there()             [[ -e "$@" ]]
file_is_to_tty()            [[ -t "$@" ]]
file_is_writable()          [[ -w "$@" ]]
files_are_hardlinked()      [[ "$1" -ef "$2" ]]
files_are_not_hardlinked()  [[ ! "$1" -ef "$2" ]]
iseven()                    [[ $(($1%2)) = 0 ]]
isodd()                     [[ $(($1%2)) = 1 ]]

isalnum() {
	case "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ" in
	*$1*)return 0;;
	esac
	return 1
}

isalpha() {
	case "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ" in
	*$1*)return 0;;
	esac
	return 1
}

isdigit() {
	case "0123456789" in
	*$1*)return 0;;
	esac
	return 1
}

islower() {
	case "abcdefghijklmnopqrstuvwxyz" in
	*$1*)return 0;;
	esac
	return 1
}

isspace() {
	case " 
	" in
	*$1*)return 0;;
	esac
	return 1
}

isupper() {
	case "ABCDEFGHIJKLMNOPQRSTUVWXYZ" in
	*$1*)return 0;;
	esac
	return 1
}

isxdigit() {
	case "0123456789abcdefABCDEF" in
	*$1*)return 0;;
	esac
	return 1
}


getinput(){ #$1 can be character to print in place of characters for passwords
	local RET='' IFS="" #get spaces and tabs
	while read -n 1 A; do
		case "$A" in
		$'\033')return 255;;
		"")printf "$RET";break;;
		$'\177')printf "\b\b\b   \b\b\b" >/dev/stderr;RET="${RET%?}";;
		*)printf "\b${1:-$A}" >/dev/stderr;RET="$RET$A";;
		esac
	done
}

get_vars(){
	local IFS="$1"
	shift
	read $@
}

nth(){ #prints the nth($2) token in string($1) separated by delimiter($3)
	[ $# -eq 3 ] || return 1
	local String="$1" i="$2" IFS="$3"
	set $String
	eval printf \${$i}
}

nth_var (){ #sets var($4) to nth($2) token in string($1) separated by ($3)
	[ $# -eq 4 ] || return 1
	local String="$1" i="$2" IFS="$3" Var="$4"
	set $String
	eval $Var=\"\${$i}\"
}

parse_desktop(){
	#standard keys - damn there are a lot of useless keys to clobber
	Name= GenericName= Comment= Exec= Icon= Terminal= TryExec= Type= MimeType=
	Categories= Actions= OnlyShowIn= NotShowIn= Version= Hidden= Actions= Path=
	Implements= Keywords= StartupNotify= StartupWMClass= DBusActivatable= URL=
	#kde
	ServiceTypes= DocPath= InitialPreference= FSType= MountPoint= ReadOnly=
	UnmountIcon= Dev=
	#deprecated keys intentionally omitted
	#Encoding= MiniIcon= TerminalOptions= Protocols= Extensions= BinaryPattern=
	#MapNotify= SwallowTitle= SwallowExec= SortOrder= FilePattern= 
	[ -f "$1" ] || return 1
	local IFS="="
	while read Var Val; do
	case "$Var" in
	"[Desktop Entry]")continue;;
	[*)break;; #don't handle groups/actions
	X-*): todo; continue;;
	*"[$LANG]"|*"${LANG%@*}"|*"${LANG%_*}")
		Var="${Var%[*}"
		eval $Var=\"\$Val\";;
	*]|"")continue;;
	*)eval $Var=\"\$Val\";;
	esac
	done < "$1"
}

set_handler(){
	#$1 is the name of the variable you want to set
	#after shift the remaining $@ are executables you want to check for
	var="$1"
	shift
	while ! type -p "$1" 2>&1 >/dev/null; do
		shift #not found so go to next candidate
	done
	#this sets the variable to the value
	eval $var=\"\$1\"
}

sh_test(){
	local CorrectIFS="$IFS"
	echo "nth() got:"
	nth "a,b,c,d,e,f,g,h" 3 ,
	echo "$String$IFS$i"
	echo "should be:
c
$CorrectIFS"
	
	echo "nth_var() got:"
	nth_var "a,b,c,d,e,f,g,h" 4 , A
	echo "$A"
	echo "should be:
d
$CorrectIFS"


for desktopFile in /usr/share/applications/*.desktop; do
echo "
  in native language:
"
parse_desktop "$desktopFile"
echo "$Name|$GenericName|$Comment|$Exec|$Icon|$Terminal|$TryExec|$Type|$MimeType|$Categories|$Actions"

echo "
  en espanol:
"
LANG=es parse_desktop "$desktopFile"
echo "$Name|$GenericName|$Comment|$Exec|$Icon|$Terminal|$TryExec|$Type|$MimeType|$Categories|$Actions"
break #only test 1 file
done

for packageFile in $HOME/.packages/Packages-*; do
	while get_vars "|" pkgname nameonly version pkgrelease category size path fullfilename dependencies description compileddistro compiledrelease repo; do
		echo "
		$pkgname
		$nameonly
		$version
		$pkgrelease
		$category
		$size
		$path
		$fullfilename
		$dependencies
		$description
		$compileddistro
		$compiledrelease
		$repo"
	break #we just need to test 1 line
	done < "$packageFile"
	break #we just need to test 1 file
done

}

$@
